"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 5 // Increased from 1 for better UX
const TOAST_REMOVE_DELAY = 5000 // Fixed: was 1000000 (16+ minutes!)

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
  duration?: number
}

const ACTION_TYPES = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
  CLEAR_ALL_TOASTS: "CLEAR_ALL_TOASTS",
} as const

let count = 0

function genId(): string {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type Action =
  | {
      type: typeof ACTION_TYPES.ADD_TOAST
      toast: ToasterToast
    }
  | {
      type: typeof ACTION_TYPES.UPDATE_TOAST
      toast: Partial<ToasterToast> & { id: string }
    }
  | {
      type: typeof ACTION_TYPES.DISMISS_TOAST
      toastId?: ToasterToast["id"]
    }
  | {
      type: typeof ACTION_TYPES.REMOVE_TOAST
      toastId?: ToasterToast["id"]
    }
  | {
      type: typeof ACTION_TYPES.CLEAR_ALL_TOASTS
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string, duration?: number) => {
  if (toastTimeouts.has(toastId)) {
    clearTimeout(toastTimeouts.get(toastId))
  }

  const delay = duration ?? TOAST_REMOVE_DELAY
  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: ACTION_TYPES.REMOVE_TOAST,
      toastId: toastId,
    })
  }, delay)

  toastTimeouts.set(toastId, timeout)
}

const removeFromRemoveQueue = (toastId: string) => {
  const timeout = toastTimeouts.get(toastId)
  if (timeout) {
    clearTimeout(timeout)
    toastTimeouts.delete(toastId)
  }
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case ACTION_TYPES.ADD_TOAST:
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case ACTION_TYPES.UPDATE_TOAST:
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case ACTION_TYPES.DISMISS_TOAST: {
      const { toastId } = action

      // Side effects - Adding timeout management
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id, toast.duration)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }

    case ACTION_TYPES.REMOVE_TOAST:
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }

    case ACTION_TYPES.CLEAR_ALL_TOASTS:
      // Clear all timeouts
      toastTimeouts.forEach((timeout) => clearTimeout(timeout))
      toastTimeouts.clear()
      
      return {
        ...state,
        toasts: [],
      }

    default:
      return state
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action): void {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

interface ToastReturn {
  id: string
  dismiss: () => void
  update: (props: Partial<ToasterToast>) => void
}

function toast({ duration, ...props }: Toast): ToastReturn {
  const id = genId()

  const update = (props: Partial<ToasterToast>): void =>
    dispatch({
      type: ACTION_TYPES.UPDATE_TOAST,
      toast: { ...props, id },
    })

  const dismiss = (): void => {
    removeFromRemoveQueue(id)
    dispatch({ type: ACTION_TYPES.DISMISS_TOAST, toastId: id })
  }

  dispatch({
    type: ACTION_TYPES.ADD_TOAST,
    toast: {
      ...props,
      id,
      duration,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  // Auto-dismiss after duration (unless it's 0 for persistent toasts)
  if (duration !== 0) {
    addToRemoveQueue(id, duration)
  }

  return {
    id,
    dismiss,
    update,
  }
}

// Convenience methods for different toast types
const toastSuccess = (props: Omit<Toast, "variant">): ToastReturn => {
  return toast({ ...props, variant: "default" })
}

const toastError = (props: Omit<Toast, "variant">): ToastReturn => {
  return toast({ ...props, variant: "destructive", duration: 0 }) // Persistent for errors
}

const toastWarning = (props: Omit<Toast, "variant">): ToastReturn => {
  return toast({ ...props, variant: "default", duration: 7000 }) // Longer for warnings
}

const toastInfo = (props: Omit<Toast, "variant">): ToastReturn => {
  return toast({ ...props, variant: "default" })
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [])

  const dismiss = React.useCallback((toastId?: string): void => {
    if (toastId) {
      removeFromRemoveQueue(toastId)
    }
    dispatch({ type: ACTION_TYPES.DISMISS_TOAST, toastId })
  }, [])

  const clearAll = React.useCallback((): void => {
    dispatch({ type: ACTION_TYPES.CLEAR_ALL_TOASTS })
  }, [])

  return {
    ...state,
    toast,
    success: toastSuccess,
    error: toastError,
    warning: toastWarning,
    info: toastInfo,
    dismiss,
    clearAll,
  }
}

// Cleanup function for when the app unmounts
export const cleanup = (): void => {
  toastTimeouts.forEach((timeout) => clearTimeout(timeout))
  toastTimeouts.clear()
  memoryState = { toasts: [] }
  listeners.length = 0
}

export { useToast, toast }
export type { ToasterToast, Toast }
